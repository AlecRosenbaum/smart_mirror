/**
* PAT API module. Factory for a PatAPI object.
* @module patapi
* @param {string} key - developer API key
* @param {string} [version] - API version (default 'v1')
* @returns {patapi~PatAPI} PatAPI - an API object for making API calls
*/

var xml2js = require('xml2js')
var parseNumbers = require('xml2js/lib/processors').parseNumbers
var parser = new xml2js.Parser({
  explicitArray: false,
  valueProcessors: [parseNumbers]
})
var qs = require('qs')
var request = require('request')
var url = 'http://realtime.portauthority.org/bustime/api/'

/**
* Port Authority API object for making API calls
* @constructor patapi~PatAPI
* @param {string} key - developer API key
* @param {string} [version] - API version (default 'v1')
*/
var PatAPI = function (key, version) {
  this._version = version || 'v1'
  this._key = key

  /**
  * GET request to the PAT API server
  * @method patapi~PatAPI#get
  * @param {string} method - appropriate API call as defined by PAT (ex: 'getvehicles')
  * @param {object} [params] - object of query string parameters (ex: {rt: '28x', pid: 'abc123'})
  * @param {patapi~PatAPI#patCallback} callback - callback function with response
  */
  this.get = function (method, params, callback) {
    var keyqs = '&' + qs.stringify({key: this._key})
    var query = this._version + '/' + 'get' + method + '?' + qs.stringify(params) + keyqs
    request(url + query, function (err, resp, xml) {
      if (err || resp.statusCode !== 200) {
        callback(err, null)
      } else {
        parser.parseString(xml, function (err, jsonresult) {
          if (err || jsonresult['bustime-response']['error']) {
            callback(jsonresult['bustime-response']['error'], null)
          } else {
            callback(null, jsonresult['bustime-response'])
          }
        })
      }
    })
  }

  /**
  * Callback for a {@link PatAPI#get} method
  * @method patapi~PatAPI#patCallback
  * @param {object} error - error of the API call, if any
  * @param {object} resp - response of the API call
  */

  /**
  * Get a list of vehicles. Shortcut for {@link patapi~PatAPI#get}('vehicles', ...)
  * @method patapi~PatAPI#getVehicles
  * @param {object} params - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getVehicles = function (params, callback) {
    this.get('vehicles', params, callback)
  }

  /**
  * Get a list of routes. Shortcut for {@link patapi~PatAPI#get}('routes', ...)
  * @method patapi~PatAPI#getRoutes
  * @param {function} callback - callback function with response
  */
  this.getRoutes = function (callback) {
    this.get('routes', null, callback)
  }

  /**
  * Get the time as reported by the PAT API server. Shortcut for {@link patapi~PatAPI#get}('time', ...)
  * @method patapi~PatAPI#getTime
  * @param {function} callback - callback function with response
  */
  this.getTime = function (callback) {
    this.get('time', null, callback)
  }

  /**
  * Get a pattern list for a bus. Shortcut for {@link patapi~PatAPI#get}('patterns', ...)
  * @method patapi~PatAPI#getPatterns
  * @param {object} params - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getPatterns = function (params, callback) {
    this.get('patterns', params, callback)
  }

  /**
  * Get a list of directions. Shortcut for {@link patapi~PatAPI#get}('directions', ...)
  * @method patapi~PatAPI#getDirections
  * @param {object} params - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getDirections = function (params, callback) {
    this.get('directions', params, callback)
  }

  /**
  * Get a list of stops. Shortcut for {@link patapi~PatAPI#get}('stops', ...)
  * @method patapi~PatAPI#getStops
  * @param {object} params - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getStops = function (params, callback) {
    this.get('stops', params, callback)
  }

  /**
  * Get a list of bus predictions. Shortcut for {@link patapi~PatAPI#get}('predictions', ...)
  * @method patapi~PatAPI#getPredictions
  * @param {object} params - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getPredictions = function (params, callback) {
    this.get('predictions', params, callback)
  }

  /**
  * Get any service bulletins for a bus. Shortcut for {@link patapi~PatAPI#get}('servicebulletins', ...)
  * @method patapi~PatAPI#getServiceBulletins
  * @param {object} params - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getServiceBulletins = function (params, callback) {
    this.get('servicebulletins', params, callback)
  }

  /**
  * Get language locales. Shortcut for {@link patapi~PatAPI#get}('locales', ...)
  * @method patapi~PatAPI#getLocales
  * @param {object} [params] - object of query string parameters
  * @param {function} callback - callback function with response
  */
  this.getLocales = function (params, callback) {
    this.get('locales', params, callback)
  }
}

module.exports = function (key, version) {
  var instance = new PatAPI(key, version)
  return instance
}

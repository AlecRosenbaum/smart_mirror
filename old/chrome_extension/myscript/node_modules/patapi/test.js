/* global describe it*/
var should = require('should')
var key = process.env.PAT_KEY || require('./keys').key
var patapi = require('./index')(key)
var utils = require('./utils')

describe('PAT bus API', function () {
  it('should have an API key', function (done) {
    should(patapi._key).be.ok()
    should(patapi._key).be.exactly(key)
    done()
  })

  it('should provide a timestamp within 1000 ms of the current time', function (done) {
    var today = new Date()
    patapi.getTime(function (err, time) {
      should(err).be.null()
      var t = utils.dateStringToDate(time.tm)
      should(t.getTime()).be.approximately(today.getTime(), 1000)
      done()
    })
  })

  it('should get a 28X bus list', function (done) {
    patapi.getVehicles({rt: '28X'}, function (err, vehicles) {
      should(err).be.null()
      should(vehicles).have.property('vehicle')
      done()
    })
  })

  it('should return an error for no 29X bus', function (done) {
    patapi.getVehicles({rt: '29X'}, function (err, vehicles) {
      should(err).not.be.null()
      should(err.msg).be.exactly('No data found for parameter')
      should(vehicles).be.null()
      done()
    })
  })

  it('should return a route service list', function (done) {
    patapi.getRoutes(function (err, routes) {
      should(err).be.null()
      should(routes).have.property('route')
      done()
    })
  })

  it('should get a pattern for a 28X', function (done) {
    patapi.getPatterns({rt: '28X'}, function (err, pattern) {
      should(err).be.null()
      should(pattern).have.property('ptr')
      done()
    })
  })

  it('should throw a no parameter provided error', function (done) {
    patapi.getPatterns(null, function (err, pattern) {
      should(err.msg).be.exactly('No parameter provided')
      should(pattern).be.null()
      done()
    })
  })

  it('should throw a dir parameter missing error', function (done) {
    patapi.getStops(null, function (err, stops) {
      should(err.msg).be.exactly('No parameters provided')
      should(stops).be.null()
      done()
    })
  })

  it('should get all end directions for a 28X', function (done) {
    patapi.getDirections({rt: '28X'}, function (err, dirs) {
      should(err).be.null()
      should(dirs).have.property('dir')
      done()
    })
  })

  it('should get all stops for an INBOUND 28X', function (done) {
    patapi.getStops({rt: '28X', dir: 'INBOUND'}, function (err, stops) {
      should(err).be.null()
      should(stops).have.property('stop')
      done()
    })
  })

  it('should throw an error when no parameter given for getVehicles', function (done) {
    patapi.getVehicles(null, function (err, vehicles) {
      should(err.msg).be.exactly('Either rt or vid parameter must be specified')
      should(vehicles).be.null()
      done()
    })
  })

  it('should give an invalid parameter error', function (done) {
    patapi.getPredictions({vid: 'abc123'}, function (err, preds) {
      should(preds).be.null()
      should(err.msg).be.exactly('No data found for parameter')
      done()
    })
  })
})
